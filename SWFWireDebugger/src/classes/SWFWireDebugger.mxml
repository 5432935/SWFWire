<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
						xmlns:ui="com.swfwire.debugger.flex.ui.*"
						showStatusBar="false"
						applicationComplete="main()"
						minWidth="400" minHeight="300"
						paddingLeft="5" paddingTop="5"
						paddingRight="5" paddingBottom="5"
						horizontalAlign="right"
						currentState="waiting" backgroundColor="#222222">
	<mx:Style source="../assets/style.css"/>
	<mx:Script>
		<![CDATA[
			import com.swfwire.debugger.Config;
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.swfwire.debugger.DebuggerAsyncModifier;
			import com.swfwire.debugger.debug;
			import com.swfwire.debugger.events.AsyncSWFModifierEvent;
			import com.swfwire.debugger.flex.ui.PreviewWindow;
			import com.swfwire.debugger.utils.*;
			import com.swfwire.decompiler.*;
			import com.swfwire.decompiler.abc.ABCInstructions;
			import com.swfwire.decompiler.abc.ABCReaderMetadata;
			import com.swfwire.decompiler.abc.instructions.*;
			import com.swfwire.decompiler.abc.tokens.*;
			import com.swfwire.decompiler.abc.tokens.multinames.MultinameQNameToken;
			import com.swfwire.decompiler.abc.tokens.traits.TraitMethodToken;
			import com.swfwire.decompiler.data.swf.SWF;
			import com.swfwire.decompiler.data.swf.SWFHeader;
			import com.swfwire.decompiler.data.swf.tags.SetBackgroundColorTag;
			import com.swfwire.decompiler.data.swf9.tags.DoABCTag;
			import com.swfwire.decompiler.data.swf9.tags.SymbolClassTag;
			import com.swfwire.decompiler.events.AsyncSWFReaderEvent;
			import com.swfwire.decompiler.events.AsyncSWFWriterEvent;
			import com.swfwire.utils.Debug;
			import com.swfwire.utils.DisplayUtil;
			import com.swfwire.utils.ObjectUtil;
			import com.swfwire.utils.air.WindowTracker;
			
			import flash.utils.describeType;
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DataGridEvent;
			import mx.events.DataGridEventReason;
			import mx.events.DynamicEvent;
			import mx.events.ListEvent;
			import mx.events.NumericStepperEvent;
			import mx.managers.DragManager;
			
			private var windowTracker:WindowTracker;
			private var appUpdater:ApplicationUpdaterUI;
			private var urlLoader:URLLoader;
			
			private var logger:*;
			private var injectedAppDomain:ApplicationDomain;
			private var lastUrl:String;
			private var isCached:Boolean;
			private var foundMainClass:Boolean;
			
			private var sanityCheck:Boolean = false;
			private var cacheEnabled:Boolean = false;
			
			private var preview:PreviewWindow = new PreviewWindow();
			
			private function main():void
			{
				debug = new Debug(true, 'SWFWireDebugger');
				debug.log('main');
				
				contextMenu.items.push(new ContextMenuItem('SWFWireDebugger Version '+Config.VERSION));
				
				stage.addEventListener(Event.ENTER_FRAME, function(ev:Event):void
				{
					if(logger)
					{
						logger.flushBuffer();
					}
				});
				
				addEventListener(Event.CLOSE, function(ev:Event):void
				{
					preview.visible = true;
					preview.close();
				});
				
				preview.visible = false;
				preview.addEventListener(Event.CLOSING, function(ev:Event):void
				{
					if(!nativeWindow.closed)
					{
						ev.preventDefault();
						preview.unload();
						preview.visible = false;
						currentState = 'waiting';
					}
				});
				preview.alwaysInFront = true;
				preview.open();
				
				appUpdater = new ApplicationUpdaterUI();
				appUpdater.configurationFile = new File('app:/updateConfig.xml');
				if(Config.TESTING)
				{
					appUpdater.addEventListener(UpdateEvent.INITIALIZED, function(ev:Event):void
					{
						appUpdater.checkNow();
					});
				}

				appUpdater.initialize();
				
				windowTracker = new WindowTracker(SharedObject.getLocal('preferences'), nativeWindow);
				windowTracker.restore();
				windowTracker.startTracking();
				
				urlLoader = new URLLoader();
				urlLoader.addEventListener(ProgressEvent.PROGRESS,	 loadProgressHandler);
				urlLoader.addEventListener(Event.COMPLETE,			 loadCompleteHandler);
				urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
				
				swfDropTarget.addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER,	 dragEnterHandler);
				swfDropTarget.addEventListener(NativeDragEvent.NATIVE_DRAG_DROP,	 dragDropHandler);
				
				preview.addEventListener(MouseEvent.MIDDLE_MOUSE_DOWN, previewMiddleDownHandler);
				//preview.addEventListener(MouseEvent.MOUSE_WHEEL, previewMiddleScrollHandler);
				
				loaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, function(ev:UncaughtErrorEvent):void
				{
					ev.preventDefault();
					ev.stopPropagation();
					ev.stopImmediatePropagation();
					logger.uncaughtError(ev.error);
					log('Uncaught error in root.');
					log(ObjectUtil.objectToString(ev.error, 2, 2, 50, 50, '	'));
				});
				
				//preview.addEventListener(MouseEvent.CONTEXT_MENU, inspectHandler);
				//preview.addEventListener(MouseEvent.MOUSE_MOVE, inspectHandler);
				preview.addEventListener('loaderComplete', function(ev:Event):void
				{
					preview.visible = true;
					preview.activate();
					
					preview.loader.contentLoaderInfo.uncaughtErrorEvents.addEventListener(UncaughtErrorEvent.UNCAUGHT_ERROR, function(ev:UncaughtErrorEvent):void
					{
						ev.preventDefault();
						ev.stopPropagation();
						ev.stopImmediatePropagation();
						logger.uncaughtError(ev.error);
						log('Uncaught error in child.');
						log(ObjectUtil.objectToString(ev.error, 2, 2, 50, 50, '	'));
					});
					/*
					var parameters:Object = {};
					var flashvarParser:URLVariables;
					try
					{
						flashvarParser = new URLVariables(flashvars.text);
						for(var iter:String in flashvarParser)
						{
							parameters[iter] = flashvarParser[iter];
						}
					}
					catch(e:Error)
					{
						log('Error parsing flashvars');
					}
					*/
					var loaderClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.Loader');
					loaderClass.overrideApplicationDomain = preview.loader.contentLoaderInfo.applicationDomain;
					
					var urlLoaderClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.URLLoader');
					urlLoaderClass.applicationRoot = lastUrl.substr(0, lastUrl.lastIndexOf('/') + 1);
					
					var stageClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.SWFWire_Stage');
					stageClass.stage = preview.stage;
					
					var loaderInfoClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.SWFWire_LoaderInfo');
					//loaderInfoClass.defaultParameters = parameters;
					
					//loaderClass.overrideApplicationDomain = new ApplicationDomain(preview.loader.contentLoaderInfo.applicationDomain);
					
					if(!sanityCheck)
					{
						var a:* = preview.loader.content;
						try
						{
							a.deferredConstructor();
						}
						catch(e:Error)
						{
							trace('Error calling deferredConstructor: '+e.getStackTrace());
						}
						preview.invalidateDisplayList();
						preview.validateDisplayList();
					}
					
					inspect(preview.loader.content);
				});
				
				var context:LoaderContext = new LoaderContext();
				context.applicationDomain = new ApplicationDomain();
				context.allowCodeImport = true;
				
				injectionLoader = new Loader();
				injectionLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev:*):void
				{
					injectedAppDomain = injectionLoader.contentLoaderInfo.applicationDomain;
					
					logOut.text += 'Injection loaded\n';
					
					logger = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.Logger');
					logger.output = logOut;
					logToTrace.selected = logger.logToTrace;
					logToOutput.selected = logger.logToOutput;
					logToTrace.selected = logger.logToTrace;
					showMethodEntry.selected = logger.showMethodEntry;
					showMethodExit.selected = logger.showMethodExit;
					showTrace.selected = logger.showTraceStatements;
					dumpArguments.selected = logger.showArguments;
					showReturn.selected = logger.showReturn;
					skipEnterFrame.selected = logger.skipEnterFrame;
					skipExitFrame.selected = logger.skipExitFrame;
					skipRender.selected = logger.skipRender;
					skipFrameConstructed.selected = logger.skipFrameConstructed;
					skipTimer.selected = logger.skipTimer;
					maxStackDepth.value = logger.maxStack;
					
					var loaderClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.Loader');
					loaderClass.globalEvents.addEventListener('loadComplete', function(ev:*):void
					{
						ev.instance.loadBytes(ev.data);
						var data:ByteArray = ev.data as ByteArray;
						var signature:String = data.readUTFBytes(3);
						
						if(signature == 'FWS' || signature == 'CWS')
						{
							log('[SWF] '+ev.request.url+' - Load complete');
						}
					});
					loaderClass.globalEvents.addEventListener('loadBytes', function(ev:*):void
					{
						var bytes:ByteArray = ev.bytes as ByteArray;
						var signature:String = bytes.readUTFBytes(3);
						
						if(signature == 'FWS' || signature == 'CWS')
						{
							read(ev.bytes, ev.context, ev.instance);
						}
						else
						{
							ev.instance.swfWire_loadBytes(ev.bytes);
						}
					});
					
					var urlLoaderClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.URLLoader');
					urlLoaderClass.globalEvents.addEventListener(Event.OPEN, function(ev:*):void
					{
						logToNet(ev.url+': open');
					});
					urlLoaderClass.globalEvents.addEventListener(ProgressEvent.PROGRESS, function(ev:*):void
					{
						logToNet(ev.url+': '+ev.bytesLoaded+'/'+ev.bytesTotal);
					});
					urlLoaderClass.globalEvents.addEventListener(Event.COMPLETE, function(ev:*):void
					{
						logToNet(ev.url+': complete');
					});
					urlLoaderClass.globalEvents.addEventListener(IOErrorEvent.IO_ERROR, function(ev:*):void
					{
						logToNet(ev.url+': error '+ev);
					});
					
					var ncClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.NetConnection');
					ncClass.globalEvents.addEventListener('connect', function(ev:*):void
					{
						logToNet(ev.command+': rtmp connect');
					});
					
					var socketClass:* = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.Socket');
					socketClass.globalEvents.addEventListener('swfWireConnect', function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket connect');
					});
					socketClass.globalEvents.addEventListener('swfWireClose', function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket closed by client');
					});
					socketClass.globalEvents.addEventListener(Event.CONNECT, function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket connected');
					});
					socketClass.globalEvents.addEventListener(ProgressEvent.SOCKET_DATA, function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket data: '+ev.instance.bytesAvailable);
					});
					socketClass.globalEvents.addEventListener(IOErrorEvent.IO_ERROR, function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket ioerror');
					});
					socketClass.globalEvents.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket security error');
					});
					socketClass.globalEvents.addEventListener(Event.CLOSE, function(ev:*):void
					{
						logToNet(ev.host+':'+ev.port+': socket closed by server');
					});
					
					//injectedAppDomain.getDefinition('com.swfwire.debugger.injected').output = logOut;
					if(Config.TESTING)
					{
						loadDefault();
					}
				});
				
				var librarySwf:String = 'app:/library.swf';
				//var librarySwf:String = 'app:/library.swf';
				//var librarySwf:String = new File(File.applicationDirectory.nativePath).resolvePath('library.swf?nocache='+Math.random()).url;
				
				publicPropertiesGrid.dataProvider = publicPropertiesDP;
				privatePropertiesGrid.dataProvider = privatePropertiesDP;
				publicMethodsGrid.dataProvider = publicMethodsDP;
				privateMethodsGrid.dataProvider = privateMethodsDP;
				
				breadCrumb.addEventListener('breadCrumbClick', function(ev:DynamicEvent):void
				{
					inspect(pathRefs[ev.index]);
				});
				
				injectionLoader.load(new URLRequest(librarySwf), context);
				//loadDefault();
			}
			
			private var previewStartDown:Point;
			
			private function previewMiddleDownHandler(ev:MouseEvent):void
			{
				stopInspection();
				/*
				preview.loader.mouseEnabled = false;
				preview.loader.mouseChildren = false;
				stage.addEventListener(MouseEvent.MIDDLE_MOUSE_UP, previewMiddleUpHandler);
				stage.addEventListener(MouseEvent.MOUSE_MOVE, previewMoveHandler);
				previewStartDown = new Point(stage.mouseX - preview.loader.x, stage.mouseY - preview.loader.y);
				*/
			}
			
			private function previewMoveHandler(ev:MouseEvent):void
			{
				if(previewStartDown)
				{
					preview.loader.x = stage.mouseX - previewStartDown.x; 
					preview.loader.y = stage.mouseY - previewStartDown.y; 
				}
			}
			
			private function previewMiddleUpHandler(ev:MouseEvent):void
			{
				stage.removeEventListener(MouseEvent.MOUSE_MOVE, previewMoveHandler);
				stage.removeEventListener(MouseEvent.MIDDLE_MOUSE_UP, previewMiddleUpHandler);
				preview.loader.mouseChildren = true;
				preview.loader.mouseEnabled = true;
			}
			
			private function previewMiddleScrollHandler(ev:MouseEvent):void
			{
				var scaleFactor:Number = Math.pow(1.05, ev.delta);
				
				var mouseNow:Point = new Point(preview.loader.mouseX, preview.loader.mouseY);
				var previousMousePosition:Point = preview.loader.localToGlobal(mouseNow);
				
				preview.loader.scaleX *= scaleFactor;
				preview.loader.scaleY *= scaleFactor;
				
				var newMousePosition:Point = preview.loader.localToGlobal(mouseNow);
				
				preview.loader.x -= newMousePosition.x - previousMousePosition.x;
				preview.loader.y -= newMousePosition.y - previousMousePosition.y;
			}
			
			private function swfwireRel(url:String):String
			{
				return new File(File.applicationDirectory.nativePath).parent.parent.resolvePath(url).url;				
			}
			
			private var injectionLoader:Loader;
			
			private function loadDefault():void
			{
				//load('http://localhost/workspaces/fb4_swfwire/SWFCorpseP1Container/bin-debug/SWFCorpseP1Container.swf');
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseAIR/bin-debug/SWFCorpseAIR.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseP1Container/bin-debug/SWFCorpseP1Container.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseFlex4-1/bin-debug/Main.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpse/bin-debug/SWFCorpse.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpse/bin-release/SWFCorpse.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFWireInspector/bin-debug/SWFWireInspector.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseFlex3-5/bin-debug/Main.swf').url);
				//load('temp.swf');
				//load('SlowMoPlayer.swf');
				//load('cs5-5_pfflib.swf');
				//load('frees.swf');
				//load('cs5-5_corpse.swf');
				//load('watch_as3.swf');
				//load('Main_112710.swf');
			}
			
			private var lastTarget:DisplayObject;
			private var lastInspectTarget:Object;
			private var publicPropertiesDP:ArrayCollection = new ArrayCollection();
			private var privatePropertiesDP:ArrayCollection = new ArrayCollection();
			private var publicMethodsDP:ArrayCollection = new ArrayCollection();
			private var privateMethodsDP:ArrayCollection = new ArrayCollection();
			private var pathRefs:Array;
			
			private function inspectHandler(ev:MouseEvent):void
			{
				var previewOverlay:UIComponent = preview.overlay;
				
				//var point:Point = new Point(stage.mouseX, stage.mouseY);
				var point:Point = new Point(preview.stage.mouseX, preview.stage.mouseY);
				var hits:Array = preview.stage.getObjectsUnderPoint(point);
				
				var target:DisplayObject = hits.pop();
				if(target == previewOverlay)
				{
					target = hits.pop();
				}
				if(!preview.loader.contains(target))
				{
					target = null;
				}

				if(target != lastTarget)
				{
					lastTarget = target;
					
					var overlayGraphics:Graphics = previewOverlay.graphics;
					overlayGraphics.clear();
					var path:Array = [];
					pathRefs = [];
					if(target)
					{
						var rect:Rectangle = target.getRect(previewOverlay);
						overlayGraphics.lineStyle(4, 0x00FF00, 0.5);
						overlayGraphics.drawRect(rect.x, rect.y, rect.width, rect.height);
						
						while(target && target.parent)
						{
							if(target == preview.loader)
							{
								break;
							}
							path.push(target.name);
							pathRefs.push(target);
							target = target.parent;
						}
						path.reverse();
						pathRefs.reverse();
						//path = DisplayUtil.getDisplayObjectPath(target, preview.loader.content);
						inspect(lastTarget);
					}
					breadCrumb.history = path;
					//inspectOut.text += ObjectUtil.objectToString(lowT, 2, 3, 50, 50, '  ');
				}
			}
			
			protected function inspect(target:Object):void
			{
				publicPropertiesDP.removeAll();
				privatePropertiesDP.removeAll();
				privateMethodsDP.removeAll();
				publicMethodsDP.removeAll();
				
				var description:XML = describeType(target);
				var node:XML;
				var name:String;
				var props:Array = [];
				var methods:Object;
				
				for each(node in description.variable)
				{
					var q:QName = new QName(node.@uri, node.@name);
					props.push(q);
					
					//props.push(node.@name);
					//inspectGridDP.addItem({name: node.@name, value: target[node.@name]});
				}
				
				try
				{
					var methodsMethod:String = 'swfWire_enumerateMethods_'+String(description.@name);
					methods = target[methodsMethod]();
					for(var iter2:* in methods)
					{
						privateMethodsDP.addItem({name: iter2, value: ''});
					}
				}
				catch(e:*)
				{
					log('Error enumerating private methods');
				}
				
				try
				{
					var propertiesMethod:String = 'swfWire_enumerateProperties_'+String(description.@name);
					methods = target[propertiesMethod]();
					for(var iter3:* in methods)
					{
						privatePropertiesDP.addItem({name: iter3, value: methods[iter3]});
					}
				}
				catch(e:*)
				{
					log('Error enumerating private properties');
				}
				
				inspectType.text = description.@name;
				
				for each(name in description.accessor.(@access == 'readwrite' || @access == 'readonly').@name)
				{
					props.push(name);
				}
				
				for(name in target)
				{
					props.push(name);
				}
				
				props.sort();
				
				for(var iter:uint = 0; iter < props.length; iter++)
				{
					try
					{
						publicPropertiesDP.addItem({name: props[iter], value: target[props[iter]]});
					}
					catch(e:Error)
					{
						publicPropertiesDP.addItem({name: props[iter], value: '<exception thrown by getter>'});
					}
				}
				
				var pubMeth:Array = [];
				
				for each(node in description.method)
				{
					publicMethodsDP.addItem({name: node.@name, value: ''});
				}
				
				lastInspectTarget = target;
			}
			
			protected function inspectGrid_itemEditEndHandler(event:DataGridEvent):void
			{
				if(event.reason != DataGridEventReason.CANCELLED)
				{
					if(lastInspectTarget)
					{
						var info:Object = publicPropertiesDP.getItemAt(event.rowIndex);
						try
						{
							lastInspectTarget[info.name] = TextInput(event.currentTarget.itemEditorInstance).text;
						}
						catch(e:*)
						{
							logOut.text += 'Error setting property.\n';
						}
					}
				}
			}
			
			private function loadProgressHandler(ev:ProgressEvent):void
			{
				loadProgress.setProgress(ev.bytesLoaded, ev.bytesTotal);
			}
			
			private function loadCompleteHandler(ev:Event):void
			{
				var bytes:ByteArray = urlLoader.data as ByteArray;
				if(bytes)
				{
					if(isCached || sanityCheck)
					{
						readProgress.setProgress(1, 1);
						modifyProgress.setProgress(1, 1);
						writeProgress.setProgress(1, 1);
						run(bytes);
						/*
						var context:LoaderContext = new LoaderContext();
						context.allowLoadBytesCodeExecution = true;
						//context.applicationDomain = new ApplicationDomain();
						context.applicationDomain = new ApplicationDomain(injectedAppDomain);
						preview.loadBytes(bytes, context);
						preview.loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev:*):void
						{
							var temp:* = preview.loader.contentLoaderInfo.applicationDomain.hasDefinition('com.swfwire.debugger.injected.Logger');
							Debug.dump({temp: temp});
						});
						*/
					}
					else
					{
						read(bytes);
					}
				}
			}
			
			private function dragEnterHandler(ev:NativeDragEvent):void
			{
				DragManager.acceptDragDrop(IUIComponent(ev.currentTarget));
			}
			
			private function dragDropHandler(ev:NativeDragEvent):void
			{
				var clipboard:Clipboard = ev.clipboard;
				var url:String = '';
				if(clipboard.hasFormat(ClipboardFormats.URL_FORMAT))
				{
					url = clipboard.getData(ClipboardFormats.URL_FORMAT) as String;
				}
				else if(clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT))
				{
					url = clipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
				}
				else if(clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files:Array = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					var file:File = files[0];
					if(file)
					{
						url = file.url;
					}
				}
				if(url)
				{
					swfUrl.text = url;
				}
				else
				{
					Alert.show('Could not parse any valid SWF file from the drop.', 'No data');
				}
			}
			
			private var lastFileSize:uint;
			private var lastRunBytes:ByteArray;
			
			public function load(url:String):void
			{
				log('Attempting to load: '+url);
				
				//var orig:File = new File(url);//File.applicationDirectory.resolvePath(url);
				
				lastUrl = url;
				
				//Caching has problems right now and prevents urls from working.
				isCached = false;
				
				/*
				lastFileSize = orig.size;
				
				var newUrl:String = url+'.recompiled.'+orig.size+'.swf';
				*/
				var newUrl:String = url+'.recompiled.0.swf';
				var f:File = File.applicationDirectory.resolvePath(newUrl);
				cacheEnabled = useCached.selected;
				if(f.exists && cacheEnabled)
				{
					url = newUrl;
					isCached = true;
				}
				else
				{
					isCached = false;
				}
				
				currentState = 'loading';
				
				log('Loading: '+url);
				
				loadProgress.setProgress(0, 0);
				readProgress.setProgress(0, 0);
				writeProgress.setProgress(0, 0);
				urlLoader.load(new URLRequest(url));
			}
			
			private function read(bytes:ByteArray, context:LoaderContext = null, instance:Loader = null):void
			{
				var start:uint = getTimer();
				
				if(!instance)
				{
					currentState = 'reading';
				}

				var swfBytes:SWFByteArray = new SWFByteArray(bytes);
				var swfReader:AsyncSWFReaderFiltered = new AsyncSWFReaderFiltered();
				var result:SWFReadResult;
				
				swfReader.includedTags[0] = true;
				swfReader.includedTags[9] = true;
				swfReader.includedTags[76] = true;
				swfReader.includedTags[82] = true;
				swfReader.addEventListener(AsyncSWFReaderEvent.TAG_READ, function(ev:AsyncSWFReaderEvent):void
				{
					var current:uint = ev.context.bytes.getBytePosition();
					var max:uint = ev.context.bytes.getLength();
					readProgress.setProgress(current, max);
				});
				swfReader.addEventListener(AsyncSWFReaderEvent.READ_COMPLETE, function(ev:AsyncSWFReaderEvent):void
				{
					var diff:uint = getTimer() - start;
					log('Reading swf took: '+diff+'ms');

					modify(ev.result.swf, ev.result.abcMetadata, context, instance);
				});
				
				result = swfReader.read(swfBytes);
			}
			
			private function modify(swf:SWF, metadata:Vector.<ABCReaderMetadata>, context:LoaderContext = null, instance:Loader = null):void
			{
				var start:uint = getTimer();
				
				var modifier:DebuggerAsyncModifier = new DebuggerAsyncModifier(swf, metadata, instance == null);
				
				if(!instance)
				{
					currentState = 'modifying';
					
					modifier.addEventListener(AsyncSWFModifierEvent.RUN, function(ev:AsyncSWFModifierEvent):void
					{
						modifyProgress.setProgress(ev.progress, 1);
					});
				}
				
				modifier.addEventListener(AsyncSWFModifierEvent.COMPLETE, function(ev:AsyncSWFModifierEvent):void
				{
					var diff:uint = getTimer() - start;
					log('Modifying swf took: '+diff+'ms');
					
					if(!instance)
					{
						preview.setSWFBackground(modifier.backgroundColor);
						
						foundMainClass = modifier.foundMainClass;
					}
					
					write(swf, context, instance);
				});
				
				modifier.start();
				return;
			}
			
			private function write(swf:SWF, context:LoaderContext = null, instance:Loader = null):void
			{
				var start:uint = getTimer();
				
				var swfWriter:AsyncSWFWriter = new AsyncSWFWriter();
				
				if(!instance)
				{
					currentState = 'writing';
					swfWriter.addEventListener(AsyncSWFWriterEvent.TAG_WRITTEN, function(ev:AsyncSWFWriterEvent):void
					{
						writeProgress.setProgress(ev.progress, 1);
					});
				}
				
				swfWriter.addEventListener(AsyncSWFWriterEvent.WRITE_COMPLETE, function(ev:AsyncSWFWriterEvent):void
				{
					var diff:uint = getTimer() - start;
					
					log('Writing swf took: '+diff+'ms');
					
					var result:SWFWriteResult = ev.result;
					
					if(!instance)
					{
						debug.dump(result, 4);
						
						preview.setSWFSize((swf.header.frameSize.xMax - swf.header.frameSize.xMin)/20, (swf.header.frameSize.yMax - swf.header.frameSize.yMin)/20);
					
						//var f:File = new File(File.applicationDirectory.nativePath).resolvePath('recompiled.swf');
						try
						{
							var f:File = new File(File.applicationDirectory.nativePath).resolvePath(lastUrl+'.recompiled.'+lastFileSize+'.swf');
							trace(f.nativePath);
							var fs:FileStream = new FileStream();
							fs.open(f, FileMode.WRITE);
							fs.writeBytes(result.bytes);
							fs.close();
						}
						catch(e:*)
						{
							log('Could not write cached file');
						}
					}
					
					run(result.bytes, context, instance);
				});

				swfWriter.write(swf);
			}
				
			private function run(bytes:ByteArray, context:LoaderContext = null, instance:Loader = null):void
			{
				if(instance)
				{
					log('[SWF] Rewrite complete... loading');
					instance['swfWire_loadBytes'](bytes, context);
				}
				else
				{
					currentState = 'loaded';
	
					lastRunBytes = bytes;
					var context:LoaderContext = new LoaderContext();
					context.allowCodeImport = true;
					context.applicationDomain = new ApplicationDomain(injectedAppDomain);

					var parameters:Object = {};
					var flashvarParser:URLVariables;
					if(flashvars.text)
					{
						try
						{
							flashvarParser = new URLVariables(flashvars.text);
							for(var iter:String in flashvarParser)
							{
								parameters[iter] = flashvarParser[iter];
							}
						}
						catch(e:Error)
						{
							log('Error parsing flashvars');
						}
					}
					
					context.parameters = parameters;
					preview.loadBytes(bytes, context);
				}
			}
			
			private function log(message:String):void
			{
				trace(message);
				logOut.text += message+'\n';
				systemLog.text += message+'\n';
			}
			
			private function logToNet(message:String):void
			{
				trace(message);
				netLog.text += message+'\n';
			}
			
			protected function showMethodEntry_clickHandler(event:MouseEvent):void
			{
				logger.showMethodEntry = showMethodEntry.selected;
			}

			protected function showMethodExit_clickHandler(event:MouseEvent):void
			{
				logger.showMethodExit = showMethodExit.selected;
			}
			
			protected function skipEnterFrame_clickHandler(ev:MouseEvent):void
			{
				logger.skipEnterFrame = skipEnterFrame.selected;
			}

			protected function skipExitFrame_clickHandler(ev:MouseEvent):void
			{
				logger.skipExitFrame = skipExitFrame.selected;
			}

			protected function skipRender_clickHandler(ev:MouseEvent):void
			{
				logger.skipRender = skipRender.selected;
			}

			protected function skipFrameConstructed_clickHandler(ev:MouseEvent):void
			{
				logger.skipFrameConstructed = skipFrameConstructed.selected;
			}

			protected function skipTimer_clickHandler(ev:MouseEvent):void
			{
				logger.skipTimer = skipTimer.selected;
			}

			protected function dumpArguments_clickHandler(event:MouseEvent):void
			{
				logger.showArguments = dumpArguments.selected;
			}

			protected function showTrace_clickHandler(event:MouseEvent):void
			{
				logger.showTrace = showTrace.selected;
			}

			protected function logToOutput_clickHandler(event:MouseEvent):void
			{
				logger.logToOutput = logToOutput.selected;
			}

			protected function showReturn_clickHandler(event:MouseEvent):void
			{
				logger.showReturn = showReturn.selected;
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				logOut.text = '';
			}

			protected function button2_clickHandler(event:MouseEvent):void
			{
				run(lastRunBytes);
			}
			
			protected function startInspection():void
			{
				inspectButton.selected = true;
				preview.loader.mouseEnabled = false;
				preview.loader.mouseChildren = false;
				preview.addEventListener(MouseEvent.MOUSE_MOVE, inspectHandler);
				preview.addEventListener(MouseEvent.MOUSE_UP, inspect_mouseUpHandler);
				preview.clearOverlay();
			}
			
			protected function stopInspection():void
			{
				inspectButton.selected = false;
				preview.removeEventListener(MouseEvent.MOUSE_UP, inspect_mouseUpHandler);
				preview.removeEventListener(MouseEvent.MOUSE_MOVE, inspectHandler);
				preview.loader.mouseChildren = true;
				preview.loader.mouseEnabled = true;
				preview.clearOverlay();
			}
			
			protected function inspect_mouseUpHandler(ev:MouseEvent):void
			{
				stopInspection();
			}

			protected function logToTrace_clickHandler(event:MouseEvent):void
			{
				logger.logToTrace = logToTrace.selected;
			}

			protected function inspectGrid_keyDownHandler(event:KeyboardEvent):void
			{
				trace('key: '+event.keyCode);
			}

			protected function inspectGrid_itemDoubleClickHandler(event:ListEvent):void
			{
				var info:Object = publicPropertiesDP.getItemAt(event.rowIndex);
				try
				{
					inspect(lastInspectTarget[info.name]);
				}
				catch(e:*)
				{
					logOut.text += 'Error inspecting property.\n';
				}
			}


			protected function maxStackDepth_changeHandler(event:NumericStepperEvent):void
			{
				logger.maxStack = maxStackDepth.value;
			}


			protected function button3_clickHandler(event:MouseEvent):void
			{
				load(swfUrl.text);
			}

		]]>
	</mx:Script>
	<mx:states>
		<mx:State name="waiting">
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{readProgress}"/>
			<mx:RemoveChild target="{modifyProgress}"/>
			<mx:RemoveChild target="{writeProgress}"/>
			<mx:RemoveChild target="{systemLog}"/>
			<mx:RemoveChild target="{breadCrumb}"/>
		</mx:State>
		<mx:State name="loading">
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{readProgress}"/>
			<mx:RemoveChild target="{modifyProgress}"/>
			<mx:RemoveChild target="{writeProgress}"/>
			<mx:RemoveChild target="{swfDropTarget}"/>
			<mx:RemoveChild target="{breadCrumb}"/>
		</mx:State>
		<mx:State name="reading">
			<mx:RemoveChild target="{swfDropTarget}"/>
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{writeProgress}"/>
			<mx:RemoveChild target="{modifyProgress}"/>
			<mx:RemoveChild target="{breadCrumb}"/>
		</mx:State>
		<mx:State name="modifying">
			<mx:RemoveChild target="{swfDropTarget}"/>
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{readProgress}"/>
			<mx:RemoveChild target="{writeProgress}"/>
			<mx:RemoveChild target="{breadCrumb}"/>
		</mx:State>
		<mx:State name="writing">
			<mx:RemoveChild target="{swfDropTarget}"/>
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{readProgress}"/>
			<mx:RemoveChild target="{modifyProgress}"/>
			<mx:RemoveChild target="{breadCrumb}"/>
		</mx:State>
		<mx:State name="loaded">
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{readProgress}"/>
			<mx:RemoveChild target="{modifyProgress}"/>
			<mx:RemoveChild target="{writeProgress}"/>
			<mx:RemoveChild target="{swfDropTarget}"/>
			<mx:RemoveChild target="{systemLog}"/>
		</mx:State>
	</mx:states>
	<mx:HBox id="header" width="100%">
		<mx:Spacer width="100%"/>
		<mx:Button styleName="logo"/>
	</mx:HBox>
	<ui:BreadCrumb id="breadCrumb" width="100%" height="26"/>
	<mx:Canvas width="100%" height="100%" id="swfDropTarget" backgroundColor="#000000" backgroundAlpha="0">
		<mx:VBox horizontalCenter="0" verticalCenter="0" horizontalAlign="center" id="vbox1" width="100%">
			<mx:Label text="Drop File Here" styleName="bigText"/>
			<mx:Form width="80%" id="form1">
				<mx:FormItem label="FlashVars: " width="100%">
					<mx:TextInput id="flashvars" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="SWF URL: " width="100%">
					<mx:TextInput id="swfUrl" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="Use Cached: ">
					<mx:CheckBox id="useCached"/>
				</mx:FormItem>
			</mx:Form>
			<mx:Button label="Debug" click="button3_clickHandler(event)" styleName="bigText"/>
		</mx:VBox>
	</mx:Canvas>
	<mx:TextArea id="systemLog" editable="false" width="100%" height="100%"/>
	<mx:HDividedBox width="100%" height="100%" id="hdividedbox1">
		<mx:VDividedBox width="100%" height="100%">
			<mx:HDividedBox width="100%" height="100%">
				<!--<ui:PreviewPanel id="preview" width="100%" height="100%"/>-->
				<mx:VBox width="400" height="100%" verticalGap="0">
					<mx:Label id="inspectType" width="100%"/>
					<mx:TabNavigator id="tabnavigator2" width="100%" height="100%" creationPolicy="all" backgroundAlpha="1" backgroundColor="#2C2C2C"
									 paddingBottom="5" paddingLeft="5" paddingTop="5" paddingRight="5" chromeColor="#131313" minHeight="0">
						<mx:Canvas width="100%" height="100%" label="Public Properties">
							<mx:DataGrid id="publicPropertiesGrid" width="100%" height="100%" editable="true"
										 doubleClickEnabled="true"
										 itemEditEnd="inspectGrid_itemEditEndHandler(event)"
										 itemDoubleClick="inspectGrid_itemDoubleClickHandler(event)"
										 keyDown="inspectGrid_keyDownHandler(event)">
								<mx:columns>
									<mx:DataGridColumn headerText="Name" dataField="name" editable="false" width="180"/>
									<mx:DataGridColumn headerText="Value" dataField="value" editable="true"/>
								</mx:columns>
							</mx:DataGrid>
						</mx:Canvas>
						<mx:Canvas width="100%" height="100%" label="Private Properties">
							<mx:DataGrid id="privatePropertiesGrid" width="100%" height="100%" editable="true"
										 doubleClickEnabled="true"
										 itemEditEnd="inspectGrid_itemEditEndHandler(event)"
										 itemDoubleClick="inspectGrid_itemDoubleClickHandler(event)"
										 keyDown="inspectGrid_keyDownHandler(event)">
								<mx:columns>
									<mx:DataGridColumn headerText="Name" dataField="name" editable="false" width="180"/>
									<mx:DataGridColumn headerText="Value" dataField="value" editable="true"/>
								</mx:columns>
							</mx:DataGrid>
						</mx:Canvas>
						<mx:Canvas width="100%" height="100%" label="Public Methods">
							<mx:DataGrid id="publicMethodsGrid" width="100%" height="100%" editable="true"
										 doubleClickEnabled="true"
										 itemEditEnd="inspectGrid_itemEditEndHandler(event)"
										 itemDoubleClick="inspectGrid_itemDoubleClickHandler(event)"
										 keyDown="inspectGrid_keyDownHandler(event)">
								<mx:columns>
									<mx:DataGridColumn headerText="Name" dataField="name" editable="false" width="180"/>
								</mx:columns>
							</mx:DataGrid>
						</mx:Canvas>
						<mx:Canvas width="100%" height="100%" label="Private Methods">
							<mx:DataGrid id="privateMethodsGrid" width="100%" height="100%" editable="true"
										 doubleClickEnabled="true"
										 itemEditEnd="inspectGrid_itemEditEndHandler(event)"
										 itemDoubleClick="inspectGrid_itemDoubleClickHandler(event)"
										 keyDown="inspectGrid_keyDownHandler(event)">
								<mx:columns>
									<mx:DataGridColumn headerText="Name" dataField="name" editable="false" width="180"/>
								</mx:columns>
							</mx:DataGrid>
						</mx:Canvas>
					</mx:TabNavigator>
				</mx:VBox>
			</mx:HDividedBox>
			<mx:VBox width="100%" height="100%">
				<mx:HBox height="40">
					<mx:Button id="inspectButton" label="Inspect" click="startInspection()" height="100%"/>
					<mx:Button id="resetButton" label="Reset Position" click="preview.resetSWFPosition()" height="100%"/>
					<mx:Button id="reloadButton" label="Reload" click="button2_clickHandler(event)" height="100%"/>
				</mx:HBox>
				<mx:TabNavigator id="tabnavigator1" width="100%" height="100%" creationPolicy="all" backgroundAlpha="1" backgroundColor="#2C2C2C"
								 paddingBottom="5" paddingLeft="5" paddingTop="5" paddingRight="5" chromeColor="#131313" minHeight="0">
					<mx:HBox label="Console" width="100%" height="100%" horizontalGap="5">
						<mx:TextArea id="logOut" width="100%" height="100%" editable="false" fontFamily="Courier New" fontSize="11"/>
						<mx:VBox height="100%" id="vbox2" paddingRight="5" minHeight="0" horizontalScrollPolicy="off" width="200">
							<mx:CheckBox id="logToOutput" label="Log to output" click="logToOutput_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="logToTrace" label="Log to trace" click="logToTrace_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="showMethodEntry"		 label="Show method entry"		 click="showMethodEntry_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="showMethodExit"		 label="Show method exit"		 click="showMethodExit_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="skipEnterFrame"		 label="Skip ENTER_FRAME"		 click="skipEnterFrame_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="skipExitFrame"			 label="Skip EXIT_FRAME"		 click="skipExitFrame_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="skipRender"			 label="Skip RENDER"			 click="skipRender_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="skipFrameConstructed"	 label="Skip FRAME_CONSTRUCTED"	 click="skipFrameConstructed_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="skipTimer"				 label="Skip TIMER"				 click="skipTimer_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="showTrace"				 label="Show trace" click="showTrace_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="dumpArguments" label="Show arguments" click="dumpArguments_clickHandler(event)" styleName="smallText"/>
							<mx:CheckBox id="showReturn" label="Show return values" click="showReturn_clickHandler(event)" styleName="smallText"/>
							<mx:HBox id="hbox1" height="50" verticalAlign="middle">
								<mx:Label text="Max Stack Depth:" styleName="smallText" paddingTop="2"/>
								<mx:NumericStepper id="maxStackDepth" value="10" change="maxStackDepth_changeHandler(event)" minimum="0" maximum="100"/>
							</mx:HBox>
							<mx:Button label="Clear Console" click="button1_clickHandler(event)" width="100%"/>
						</mx:VBox>
					</mx:HBox>
					<mx:Canvas label="Display List">
						<mx:TextArea id="tempDisplayList" width="100%" height="100%" editable="false"/>
					</mx:Canvas>
					<mx:Canvas label="Net">
						<mx:TextArea id="netLog" width="100%" height="100%" editable="false"/>
					</mx:Canvas>
				</mx:TabNavigator>
			</mx:VBox>
		</mx:VDividedBox>
	</mx:HDividedBox>
	<mx:ProgressBar id="loadProgress" width="100%" mode="manual" label="Loading SWF: %3%%" styleName="bigText"/>
	<mx:ProgressBar id="readProgress" width="100%" mode="manual" label="Reading SWF: %3%%" styleName="bigText"/>
	<mx:ProgressBar id="modifyProgress" width="100%" mode="manual" label="Modifying SWF: %3%%" styleName="bigText"/>
	<mx:ProgressBar id="writeProgress" width="100%" mode="manual" label="Writing SWF: %3%%" styleName="bigText"/>
</mx:WindowedApplication>
