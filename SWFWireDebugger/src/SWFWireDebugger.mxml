<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:ui="com.swfwire.debugger.flex.ui.*"
					   showStatusBar="false"
					   applicationComplete="main()">
	<fx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			
			import com.magicalhobo.air.utils.WindowTracker;
			import com.swfwire.debugger.utils.ABCWrapper;
			import com.swfwire.debugger.utils.InstructionLocation;
			import com.swfwire.debugger.utils.InstructionTemplate;
			import com.swfwire.decompiler.AsyncSWFReader;
			import com.swfwire.decompiler.AsyncSWFReaderFiltered;
			import com.swfwire.decompiler.SWF10Writer;
			import com.swfwire.decompiler.SWFByteArray;
			import com.swfwire.decompiler.SWFReadResult;
			import com.swfwire.decompiler.SWFWriteResult;
			import com.swfwire.decompiler.SWFWriter;
			import com.swfwire.decompiler.abc.ABCReaderMetadata;
			import com.swfwire.decompiler.abc.instructions.*;
			import com.swfwire.decompiler.abc.tokens.ConstantPoolToken;
			import com.swfwire.decompiler.abc.tokens.InstanceToken;
			import com.swfwire.decompiler.abc.tokens.MethodBodyInfoToken;
			import com.swfwire.decompiler.abc.tokens.MethodInfoToken;
			import com.swfwire.decompiler.abc.tokens.ParamInfoToken;
			import com.swfwire.decompiler.abc.tokens.TraitsInfoToken;
			import com.swfwire.decompiler.abc.tokens.cpool.CPoolIndex;
			import com.swfwire.decompiler.abc.tokens.multinames.MultinameQNameToken;
			import com.swfwire.decompiler.abc.tokens.traits.TraitMethodToken;
			import com.swfwire.decompiler.data.swf.SWF;
			import com.swfwire.decompiler.data.swf.SWFHeader;
			import com.swfwire.decompiler.data.swf.tags.MetadataTag;
			import com.swfwire.decompiler.data.swf.tags.SWFTag;
			import com.swfwire.decompiler.data.swf9.tags.DoABCTag;
			import com.swfwire.decompiler.data.swf9.tags.SymbolClassTag;
			import com.swfwire.decompiler.events.AsyncSWFReaderEvent;
			import com.swfwire.utils.Debug;
			
			import flash.utils.getTimer;
			
			import mx.managers.SystemManager;
			
			private var windowTracker:WindowTracker;
			private var appUpdater:ApplicationUpdaterUI;
			private var urlLoader:URLLoader;
			
			private var logger:*;
			private var injectedAppDomain:ApplicationDomain;
			
			private function main():void
			{
				appUpdater = new ApplicationUpdaterUI();
				appUpdater.configurationFile = new File('app:/updateConfig.xml');
				appUpdater.initialize();
				
				windowTracker = new WindowTracker(SharedObject.getLocal('preferences'), nativeWindow);
				windowTracker.restore();
				windowTracker.startTracking();
				
				urlLoader = new URLLoader();
				urlLoader.addEventListener(ProgressEvent.PROGRESS,	 loadProgressHandler);
				urlLoader.addEventListener(Event.COMPLETE,			 loadCompleteHandler);
				urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
				
				preview.addEventListener(MouseEvent.CONTEXT_MENU, inspectHandler);
				
				Debug.enabled = true;
				
				var context:LoaderContext = new LoaderContext();
				context.applicationDomain = new ApplicationDomain();
				context.allowLoadBytesCodeExecution = true;
				
				injectionLoader = new Loader();
				injectionLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev:*):void
				{
					injectedAppDomain = injectionLoader.contentLoaderInfo.applicationDomain;
					
					logger = injectedAppDomain.getDefinition('com.swfwire.debugger.injected.Logger');
					logger.output = logOut;
					
					//injectedAppDomain.getDefinition('com.swfwire.debugger.injected').output = logOut;
					loadDefault();
				});
				injectionLoader.load(new URLRequest(swfwireRel('SWFWireDebuggerInjection/bin-debug/SWFWireDebuggerInjection.swf')), context);
				//loadDefault();
			}
			
			private function swfwireRel(url:String):String
			{
				return new File(File.applicationDirectory.nativePath).parent.parent.resolvePath(url).url;				
			}
			
			private var injectionLoader:Loader;
			
			private function loadDefault():void
			{
				
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseFlex4-1/bin-debug/Main.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpse/bin-debug/SWFCorpse.swf').url);
				//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFWireInspector/bin-debug/SWFWireInspector.swf').url);
				load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseFlex3-5/bin-debug/Main.swf').url);
				//load('temp.swf');
				//load('GSDesktop.swf');
			}
			
			private function inspectHandler(ev:MouseEvent):void
			{
				var point:Point = preview.localToGlobal(new Point(preview.mouseX, preview.mouseY));
				
				var objects:Array = preview.getObjectsUnderPoint(point);
				//objects.shift();
				
				var target:DisplayObject = objects[0];
				
				var path:Array = [];
				var currentTarget:DisplayObject = target;
				
				while(currentTarget && currentTarget.parent)
				{
					path.push(currentTarget.name);
					currentTarget = currentTarget.parent;
				}
				
				inspectOut.text += path.reverse().join('.')+'\n';
				
				Debug.dump(objects, 2);
				//trace(objects.join('\n'));
			}
			
			private function loadProgressHandler(ev:ProgressEvent):void
			{
				loadProgress.setProgress(ev.bytesLoaded, ev.bytesTotal);
			}
			
			private function loadCompleteHandler(ev:Event):void
			{
				var bytes:ByteArray = urlLoader.data as ByteArray;
				if(bytes)
				{
					//sanity check
					if(false)
					{
						var context:LoaderContext = new LoaderContext();
						context.allowLoadBytesCodeExecution = true;
						//context.applicationDomain = new ApplicationDomain();
						context.applicationDomain = new ApplicationDomain(injectedAppDomain);
						preview.loadBytes(bytes, context);
						preview.loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev:*):void
						{
							var temp:* = preview.loader.contentLoaderInfo.applicationDomain.hasDefinition('com.swfwire.debugger.injected.Logger');
							Debug.dump({temp: temp});
						});
					}
					else
					{
						parse(bytes);
					}
				}
			}
			
			private function parse(bytes:ByteArray):void
			{
				var swfBytes:SWFByteArray = new SWFByteArray(bytes);
				var swfReader:AsyncSWFReaderFiltered = new AsyncSWFReaderFiltered();
				var result:SWFReadResult;
				
				swfReader.includedTags[0] = true;
				swfReader.includedTags[76] = true;
				swfReader.includedTags[82] = true;
				swfReader.addEventListener(AsyncSWFReaderEvent.TAG_READ, function(ev:Event):void
				{
					var current:uint = swfBytes.getBytePosition();
					var max:uint = swfBytes.getLength();
					readProgress.setProgress(current, max);
				});
				swfReader.addEventListener(AsyncSWFReaderEvent.READ_COMPLETE, function(ev:Event):void
				{
					inject(result.swf, result.abcMetadata);
				});
				
				result = swfReader.read(swfBytes);
			}
			
			private function inject(swf:SWF, metadata:Vector.<ABCReaderMetadata>):void
			{
				var start:uint = getTimer();
				
				swf.header.signature = SWFHeader.UNCOMPRESSED_SIGNATURE;
				
				var mainClass:String = '';
				var iTag:uint;
				
				outer:
				for(iTag = 0; iTag < swf.tags.length; iTag++)
				{
					var sct:SymbolClassTag = swf.tags[iTag] as SymbolClassTag;
					if(sct)
					{
						for(var isym:uint = 0; isym < sct.symbols.length; isym++)
						{
							if(sct.symbols[isym].characterId == 0)
							{
								mainClass = sct.symbols[isym].className;
								break outer;
							}
						}
					}
				}
				
				trace('main class: '+mainClass);
				
				var mainClassPackage:String = '';
				var mainClassName:String = mainClass;
				
				if(mainClass.indexOf('.') >= 0)
				{
					mainClassName = mainClass.substr(mainClass.lastIndexOf('.') + 1);
					mainClassPackage = mainClass.substr(0, mainClass.lastIndexOf('.'));
				}
				
				for(iTag = 0; iTag < swf.tags.length; iTag++)
				{
					var abcTag:DoABCTag = swf.tags[iTag] as DoABCTag;
					if(abcTag)
					{
						var wrapper:ABCWrapper = new ABCWrapper(abcTag.abcFile, metadata[iTag]);
						
						var securityIndex:int = wrapper.getMultinameIndex('flash.system', 'Security');
						if(securityIndex >= 0)
						{
							var security:MultinameQNameToken = abcTag.abcFile.cpool.multinames[securityIndex].data as MultinameQNameToken;
							var injectedNamespace:uint = wrapper.addNamespaceFromString('com.swfwire.debugger.injected'); 
							security.ns = injectedNamespace;
							//abcTag.abcFile.cpool.namespaces[security.ns].name = wrapper.addString('com.swfwire.debugger.injected');
						}
						
						var mainIndex:int = wrapper.getMultinameIndex(mainClassPackage, mainClassName);
						var mainInst:InstanceToken = null;
						
						if(mainIndex >= 0)
						{
							for(var i:uint = 0; i < abcTag.abcFile.instances.length; i++)
							{
								var inst:InstanceToken = abcTag.abcFile.instances[i];
								if(inst.name == mainIndex)
								{
									mainInst = inst;
									break;
								}
							}
						}
						
						if(mainInst)
						{
							var defcm:MethodInfoToken = new MethodInfoToken();
							defcm.name = wrapper.addString(mainClass+'/deferredConstructor');
							
							var defcmi:uint = abcTag.abcFile.methods.push(defcm) - 1;
							
							var defcmni:int = wrapper.addQName(
								wrapper.addNamespaceFromString(''), 
								wrapper.addString('deferredConstructor'));

							var mainTrait:TraitsInfoToken = new TraitsInfoToken(defcmni,
								TraitsInfoToken.KIND_TRAIT_METHOD,
								0,
								new TraitMethodToken(0, defcmi));
							
							//Debug.log('test', 'before', mainInst.traits);
							
							mainInst.traits.push(mainTrait);
							//mainInst.traits[10].name = fmi;
							//abcTag.abcFile.methods[mainInst.iinit].
							
							var emptyMethod:MethodBodyInfoToken = new MethodBodyInfoToken(
								mainInst.iinit, 1, 1, 9, 10);
							emptyMethod.instructions = wrapper.getEmptyConstructorInstructions();
							
							abcTag.abcFile.methodBodies.push(emptyMethod);
							
							var mainMB:MethodBodyInfoToken = wrapper.findMethodBody(mainInst.iinit);
							mainMB.method = defcmi;
							
							//mainInst.iinit = fci;
						}
						
						//Debug.log('test', 'after', mainInst.traits);
						
						//mainInst.iinit--;
						
						if(true)
						{
							var loggerClassIndex:int = wrapper.addQName(
								wrapper.addNamespaceFromString('com.swfwire.debugger.injected'), 
								wrapper.addString('Logger'));
							
							var emptyNS:int = wrapper.addNamespaceFromString('');
							
							var enterFunctionIndex:int = wrapper.addQName(emptyNS, wrapper.addString('enterFunction'));
							var exitFunctionIndex:int = wrapper.addQName(emptyNS, wrapper.addString('exitFunction'));
							
							var cp:ConstantPoolToken = abcTag.abcFile.cpool;
							
							var traceIndex:int = wrapper.getMultinameIndex('', 'trace');
							if(traceIndex >= 0)
							{
								var l:* = wrapper.findInstruction(new InstructionTemplate(Instruction_findpropstrict, {index: traceIndex}));
								
								for(var iter:* in l)
								{
									abcTag.abcFile.methodBodies[l[iter].methodBody].maxStack += 1;
								}
								
								wrapper.replaceInstruction2(l, function(z:*, a:Vector.<IInstruction>):Vector.<IInstruction>
								{
									var b:Vector.<IInstruction> = new Vector.<IInstruction>();
									b.push(new Instruction_getlex(loggerClassIndex));
									return b;
								});
							
								var methodIndex:int = wrapper.addQName(emptyNS, wrapper.addString('log'));
								
								l = wrapper.findInstruction(new InstructionTemplate(Instruction_callpropvoid, {index: traceIndex}));
								wrapper.replaceInstruction2(l, function(z:*, a:Vector.<IInstruction>):Vector.<IInstruction>
								{
									var b:Vector.<IInstruction> = new Vector.<IInstruction>();
									b.push(new Instruction_callpropvoid(methodIndex, Object(a[0]).argCount));
									return b;
								});
								
								l = wrapper.findInstruction(new InstructionTemplate(Instruction_callproperty, {index: traceIndex}));
								wrapper.replaceInstruction2(l, function(z:*, a:Vector.<IInstruction>):Vector.<IInstruction>
								{
									var b:Vector.<IInstruction> = new Vector.<IInstruction>();
									b.push(new Instruction_callproperty(methodIndex, Object(a[0]).argCount));
									return b;
								});
							}
							
							for(var i9:int = 0; i9 < abcTag.abcFile.methodBodies.length; i9++)
							{
								var mb:MethodBodyInfoToken = abcTag.abcFile.methodBodies[i9];
								if(mb.initScopeDepth > 1)
								{
									var j9:* = abcTag.abcFile.methodBodies[i9].instructions;
									var j6:int =  wrapper.addString(String(i9));
									
									var paramCount:uint = abcTag.abcFile.methods[mb.method].paramCount;

									abcTag.abcFile.methodBodies[i9].maxStack += paramCount * 2 + 3;
									
									j9.unshift(new Instruction_callpropvoid(enterFunctionIndex, 3));
									
									if(paramCount > 0)
									{
										j9.unshift(new Instruction_newobject(paramCount));
	
										for(var i10:int = paramCount - 1; i10 >= 0; i10--)
										{
											var paramName:ParamInfoToken = abcTag.abcFile.methods[mb.method].paramNames[i10];
											j9.unshift(new Instruction_getlocal(i10));
											if(paramName && paramName.value > 0)
											{
												j9.unshift(new Instruction_pushstring(paramName.value));
											}
											else
											{
												j9.unshift(new Instruction_pushstring(wrapper.addString('param'+i10)));
											}
										}
									}
									else
									{
										j9.unshift(new Instruction_pushnull());
									}
									
									j9.unshift(new Instruction_getlocal0());
									
									j9.unshift(new Instruction_pushstring(j6));
									j9.unshift(new Instruction_getlex(loggerClassIndex));
								}
							}
							
							var m:*;
								
							l = wrapper.findInstruction(new InstructionTemplate(Instruction_returnvoid, {}));
							m = wrapper.findInstruction(new InstructionTemplate(Instruction_returnvalue, {}));
							for(var iter4:* in m)
							{
								l.push(m[iter4]);
							}
							
							for(var iter6:* in l)
							{
								abcTag.abcFile.methodBodies[l[iter6].methodBody].maxStack += 1;
							}
							
							wrapper.replaceInstruction2(l, function(z:InstructionLocation, a:Vector.<IInstruction>):Vector.<IInstruction>
							{
								var mb:MethodBodyInfoToken = abcTag.abcFile.methodBodies[z.methodBody];
								if(mb.initScopeDepth > 1)
								{
									a.unshift(new Instruction_callpropvoid(exitFunctionIndex, 0));
									a.unshift(new Instruction_getlex(loggerClassIndex));
								}
								wrapper.redirectReferences(z.methodBody, a[a.length - 1], a[0]);
								return a;
							});
						}
					}
				}
				
				var diff:uint = getTimer() - start;
				
				trace('Modifying swf took: '+diff+'ms');
				logOut.text += 'Modifying swf took: '+diff+'ms\n';
				
				start = getTimer();

				var swfWriter:SWF10Writer = new SWF10Writer();
				
				var result:SWFWriteResult = swfWriter.write(swf);
				
				writeProgress.setProgress(1, 1);
				
				diff = getTimer() - start;
				
				trace('Writing swf took: '+diff+'ms');
				logOut.text += 'Writing swf took: '+diff+'ms\n';
				
				Debug.dump(result, 4);
				
				var f:File = new File(File.applicationDirectory.nativePath).resolvePath('recompiled.swf');
				trace(f.nativePath);
				var fs:FileStream = new FileStream();
				fs.open(f, FileMode.WRITE);
				fs.writeBytes(result.bytes);
				fs.close();
				
				var context:LoaderContext = new LoaderContext();
				context.allowLoadBytesCodeExecution = true;
				context.applicationDomain = new ApplicationDomain(injectedAppDomain);
				preview.addEventListener('loaderComplete', function(ev:Event):void
				{
					var a:* = preview.loader.content;
					a.deferredConstructor();
				});
				preview.loadBytes(result.bytes, context);
			}
			
			public function load(url:String):void
			{
				loadProgress.setProgress(0, 0);
				readProgress.setProgress(0, 0);
				writeProgress.setProgress(0, 0);
				urlLoader.load(new URLRequest(url));
			}

			protected function showMethodEntry_clickHandler(event:MouseEvent):void
			{
				logger.showMethodEntry = showMethodEntry.selected;
			}

			protected function dumpArguments_clickHandler(event:MouseEvent):void
			{
				logger.dumpArguments = dumpArguments.selected;
			}

			protected function showTrace_clickHandler(event:MouseEvent):void
			{
				logger.showTrace = showTrace.selected;
			}
		]]>
	</fx:Script>
	<s:layout>
		<s:VerticalLayout paddingLeft="5" paddingTop="5" paddingRight="5" paddingBottom="5"/>
	</s:layout>
	<mx:HDividedBox width="100%" height="100%">
		<s:BorderContainer height="100%">
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>
			<s:CheckBox id="showMethodEntry" label="Show method entry" click="showMethodEntry_clickHandler(event)" selected="true"/>
			<s:CheckBox id="dumpArguments" label="Dump arguments" click="dumpArguments_clickHandler(event)" selected="true"/>
			<s:CheckBox id="showTrace" label="Show trace" click="showTrace_clickHandler(event)" selected="true"/>
		</s:BorderContainer>
		<mx:VDividedBox width="100%" height="100%">
			<mx:HDividedBox width="100%" height="100%">
				<ui:PreviewPanel id="preview" width="100%" height="100%"/>
				<mx:TextArea id="inspectOut" width="100%" height="100%"/>
			</mx:HDividedBox>
			<mx:TextArea id="logOut" width="100%" height="100%" editable="false" fontFamily="Courier New" fontSize="11"/>
		</mx:VDividedBox>
	</mx:HDividedBox>
	<mx:ProgressBar id="loadProgress" width="100%" mode="manual" labelPlacement="center" label="Loading SWF: %3%%"/>
	<mx:ProgressBar id="readProgress" width="100%" mode="manual" labelPlacement="center" label="Reading SWF: %3%%"/>
	<mx:ProgressBar id="writeProgress" width="100%" mode="manual" labelPlacement="center" label="Writing SWF: %3%%"/>
</s:WindowedApplication>
