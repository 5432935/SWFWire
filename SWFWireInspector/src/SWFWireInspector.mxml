<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
						xmlns:ns1="*"
						xmlns:ui="com.swfwire.inspector.flex.ui.*"
						width="800" height="800" applicationComplete="main()" creationPolicy="all"
						currentState="waiting" frameRate="60" layout="absolute"
						showStatusBar="false">
	<mx:Style source="style.css"/>
	<mx:Script>
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			import air.update.events.UpdateEvent;
			
			import com.swfwire.decompiler.*;
			import com.swfwire.decompiler.abc.instructions.*;
			import com.swfwire.decompiler.abc.tokens.*;
			import com.swfwire.decompiler.data.swf.*;
			import com.swfwire.decompiler.data.swf.records.*;
			import com.swfwire.decompiler.data.swf.tags.*;
			import com.swfwire.decompiler.data.swf2.tags.DefineBitsJPEG2Tag;
			import com.swfwire.decompiler.data.swf2.tags.DefineShape2Tag;
			import com.swfwire.decompiler.data.swf3.tags.DefineShape3Tag;
			import com.swfwire.decompiler.data.swf3.tags.PlaceObject2Tag;
			import com.swfwire.decompiler.data.swf8.tags.DefineShape4Tag;
			import com.swfwire.decompiler.data.swf9.tags.DoABCTag;
			import com.swfwire.decompiler.events.AsyncSWFReaderEvent;
			import com.swfwire.decompiler.utils.*;
			import com.swfwire.inspector.Config;
			import com.swfwire.inspector.debug;
			import com.swfwire.utils.*;
			import com.swfwire.utils.air.WindowTracker;
			
			import flash.utils.getTimer;
			
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.managers.DragManager;
			
			import net.anirudh.as3syntaxhighlight.CodePrettyPrint;

			private var loader:Loader;
			private var urlLoader:URLLoader;
			private var windowTracker:WindowTracker;
			private var appUpdater:ApplicationUpdaterUI;
			private var result:SWFReadResult;
			private var translator:ABCToActionScript;
			private var lastSource:ByteArray;
			private var lastResult:SWFReadResult;
			private var tagDumpCache:Array;
			private var tagHexCache:Array;
			private var parseStart:uint;
			private var syntaxHighlighting:Boolean = true;

			private function main():void
			{
				debug = new Debug(true, 'SWFWireInspector');
				debug.log('main');

				contextMenu.items.push(new ContextMenuItem('SWFWireInspector '+Config.VERSION));

				appUpdater = new ApplicationUpdaterUI();
				appUpdater.configurationFile = new File('app:/updateConfig.xml');
				if(Config.TESTING)
				{
					appUpdater.addEventListener(UpdateEvent.INITIALIZED, function(ev:Event):void
					{
						appUpdater.checkNow();
					});
				}
				
				appUpdater.initialize();

				windowTracker = new WindowTracker(SharedObject.getLocal('preferences'), nativeWindow);
				windowTracker.restore();
				windowTracker.startTracking();

				urlLoader = new URLLoader();
				urlLoader.addEventListener(ProgressEvent.PROGRESS, loadProgressHandler);
				urlLoader.addEventListener(Event.COMPLETE, completeHandler);
				urlLoader.dataFormat = URLLoaderDataFormat.BINARY;

				addEventListener(NativeDragEvent.NATIVE_DRAG_ENTER,	 dragEnterHandler);
				addEventListener(NativeDragEvent.NATIVE_DRAG_DROP,	 dragDropHandler);

				loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, function(ev:Event):void
				{
					detailsPanel.preview.invalidateDisplayList();
					detailsPanel.preview.validateDisplayList();
				});

				try
				{
					loaderInfo['uncaughtErrorEvents'].addEventListener('uncaughtError', function(ev:*):void
					{
						log('Uncaught Error.');
						try
						{
							log(ev.error);
						}
						catch(e:*){}
					});
				}
				catch(e:*){}

				detailsPanel.preview.addChild(loader);

				detailsPanel.actionScript.classesList.addEventListener(ListEvent.CHANGE, actionScriptPanelChangedHandler);
				detailsPanel.actionScript.showActionScript.addEventListener(Event.CHANGE, actionScriptPanelChangedHandler);
				detailsPanel.actionScript.showByteCode.addEventListener(Event.CHANGE, actionScriptPanelChangedHandler);
				detailsPanel.actionScript.showDebug.addEventListener(Event.CHANGE, actionScriptPanelChangedHandler);
				detailsPanel.actionScript.showStack.addEventListener(Event.CHANGE, actionScriptPanelChangedHandler);
				detailsPanel.actionScript.showBranchInfo.addEventListener(Event.CHANGE, actionScriptPanelChangedHandler);

				if(Config.TESTING)
				{
					//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseInvalidBranch/bin-debug/SWFCorpseInvalidBranch.swf').url);
					load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpse/bin-debug/SWFCorpse.swf').url);
					//load(new File(File.applicationDirectory.nativePath).parent.parent.resolvePath('SWFCorpseFlex4-1/bin-debug/Main.swf').url);
					//load(new File('D:\\youtube.swf').url);
				}
			}

			private function actionScriptPanelChangedHandler(ev:*):void
			{
				updateClasses();
			}

			private function dragEnterHandler(ev:NativeDragEvent):void
			{
				DragManager.acceptDragDrop(this);
			}

			private function dragDropHandler(ev:NativeDragEvent):void
			{
				var clipboard:Clipboard = ev.clipboard;
				var url:String = '';
				if(clipboard.hasFormat(ClipboardFormats.URL_FORMAT))
				{
					url = clipboard.getData(ClipboardFormats.URL_FORMAT) as String;
				}
				else if(clipboard.hasFormat(ClipboardFormats.TEXT_FORMAT))
				{
					url = clipboard.getData(ClipboardFormats.TEXT_FORMAT) as String;
				}
				else if(clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{
					var files:Array = clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
					var file:File = files[0];
					if(file)
					{
						url = file.url;
					}
				}
				if(url)
				{
					currentState = 'loading';
					load(url);
				}
				else
				{
					Alert.show('Could not parse any valid SWF file from the drop.', 'No data');
				}
			}

			private function load(url:String):void
			{
				log('Loading: '+url);
				urlLoader.load(new URLRequest(url));
			}

			private function loadProgressHandler(ev:ProgressEvent):void
			{
				loadProgress.setProgress(ev.bytesLoaded, ev.bytesTotal);
			}

			private function completeHandler(ev:Event):void
			{
				log('Done loading.');
				currentState = 'parsing';
				var bytes:ByteArray = urlLoader.data as ByteArray;
				if(bytes)
				{
					currentTagId = -1;
					parse(bytes);
				}
				else
				{
					log('No data found.');
				}
			}

			private function log(str:*):void
			{
				trace(str);
				var scrollToBottom:Boolean = logPanel.verticalScrollPosition >= logPanel.maxVerticalScrollPosition;
				logPanel.text += str+'\n';
				if(scrollToBottom)
				{
					logPanel.validateNow();
					logPanel.verticalScrollPosition = logPanel.maxVerticalScrollPosition;
				}
			}

			private function parse(bytes:ByteArray):void
			{
				log('Parsing '+bytes.length+' bytes...');

				var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);

				lastSource = bytes;

				//ByteArrayUtil.dumpHex(bytes);

				var swfBytes:SWFByteArray = new SWFByteArray(bytes);
				var swf:AsyncSWFReader = new AsyncSWFReader();

				swf.addEventListener(AsyncSWFReaderEvent.TAG_READ, tagReadHandler);
				swf.addEventListener(AsyncSWFReaderEvent.READ_COMPLETE, readCompleteHandler);

				loadProgress.setProgress(0, 0);
				parseStart = getTimer();
				result = swf.read(swfBytes);
			}

			private function tagReadHandler(ev:AsyncSWFReaderEvent):void
			{
				var current:uint = ev.context.bytes.getBytePosition();
				var max:uint = ev.context.bytes.getLength();
				parseProgress.setProgress(current, max);
			}

			private function readCompleteHandler(ev:AsyncSWFReaderEvent):void
			{
				log('Parsing '+result.tagMetadata.length+' tags ('+ev.context.bytes.getLength()+' bytes) took '+(getTimer() - parseStart)+'ms.');
				doneHandler();
			}

			private function doneHandler():void
			{
				currentState = 'loaded';

				loadProgress.setProgress(1, 1);

				if(result.errors.length > 0)
				{
					log(result.warnings.length+' errors:');
					log(result.errors.join('\n'));
				}
				else
				{
					log('No errors!');
				}

				if(result.warnings.length > 0)
				{
					log(result.warnings.length+' warnings:');
					log('\t'+result.warnings.join('\n\t'));
				}
				else
				{
					log('No warnings!');
				}

				lastResult = result;
				tagDumpCache = [];
				tagHexCache = [];

				var dp:Array = [];

				dp.push({id: -1, displayId: '', name: 'SWFHeader', size: lastResult.tagMetadata[0].start});

				for(var iterTag:uint = 0; iterTag < result.tagMetadata.length; iterTag++)
				{
					var metadata:Object = result.tagMetadata[iterTag];
					var label:String = metadata.name.substr(metadata.name.indexOf('::') + 2);
					dp.push({name: label, id: iterTag, displayId: iterTag, size: metadata.length});
				}

				detailsPanel.tagList.addEventListener(ListEvent.CHANGE, tagListChangeHandler);

				detailsPanel.tagList.dataProvider = dp;
				if(Config.TESTING)
				{
					detailsPanel.tagList.selectedIndex = 9;
					//detailsPanel.tagList.selectedIndex = 13;
					//detailsPanel.tagList.selectedIndex = 149;
					//detailsPanel.tagList.selectedIndex = 249;
				}
				else
				{
					detailsPanel.tagList.selectedIndex = 0;
				}

				detailsPanel.currentState = 'actionScript';
				detailsPanel.actionScript.currentState = 'classes';

				updateBottomPanel();
				return;
			}

			private function tagListChangeHandler(ev:ListEvent):void
			{
				updateBottomPanel();
			}

			private function parseABC(tag:DoABCTag, id:uint):void
			{
				if(id != currentTagId)
				{
					currentTagId = id;
					translator = new ABCToActionScript(tag.abcFile, result.abcMetadata[id].offsetFromId);
	
					var cpool:ConstantPoolToken = tag.abcFile.cpool;
	
					detailsPanel.actionScript.cpool.text = ObjectUtil.objectToString(cpool, 10, 3, 80, 100, '	');
	
					detailsPanel.actionScript.classesCount = tag.abcFile.classCount;
	
					var classes:Array = [];
					var ns:String;
					var name:String;
	
					for(var iter:uint = 0; iter < tag.abcFile.classCount; iter++)
					{
						var instance:InstanceToken = tag.abcFile.instances[iter];
	
						var rc:ReadableClass = new ReadableClass();
						rc.className = new ReadableMultiname();
						translator.getReadableMultiname(instance.name, rc.className);
	
						classes.push({id: iter, className: rc.className.name, packageName: rc.className.namespace});
					}
	
					detailsPanel.actionScript.classesList.dataProvider = classes;
					detailsPanel.actionScript.classesList.selectedIndex = 0;
					updateClasses();
				}
			}

			private function getTagDump(tagId:uint, object:Object):void
			{
				var dump:String;
				if(tagDumpCache[tagId])
				{
					dump = tagDumpCache[tagId] as String;
				}
				else
				{
					dump = ObjectUtil.objectToString(object, 10, 3, 80, 100, '	');
					tagDumpCache[tagId] = dump;
				}
				detailsPanel.detail.text = dump;
			}

			private function getShapePreview(characterId:uint, type:uint, metadata:Object):void
			{
				var swfWriter:SWF10Writer = new SWF10Writer();

				var swf:SWF = new SWF();
				swf.header = new SWFHeader();
				swf.header.fileVersion = 10;
				swf.header.frameCount = 1;
				swf.header.frameRate = 24;
				swf.header.frameSize = new RectangleRecord();
				swf.header.frameSize.xMin = 0
				swf.header.frameSize.xMax = 800 * 20;
				swf.header.frameSize.yMin = 0;
				swf.header.frameSize.yMax = 600 * 20;
				swf.header.signature = SWFHeader.UNCOMPRESSED_SIGNATURE;
				swf.tags = new Vector.<SWFTag>();

				var tag:UnknownTag = new UnknownTag();
				tag.header = new TagHeaderRecord();
				tag.header.type = type;
				tag.content = new ByteArray();
				tag.content.writeBytes(lastSource, metadata.contentStart, metadata.contentLength);

				swf.tags.push(tag);

				var placeTag:PlaceObject2Tag = new PlaceObject2Tag();
				placeTag.header = new TagHeaderRecord();
				placeTag.header.type = 26;
				placeTag.characterId = characterId;
				placeTag.depth = 1;

				swf.tags.push(placeTag);

				var showTag:ShowFrameTag = new ShowFrameTag();
				showTag.header = new TagHeaderRecord();
				showTag.header.type = 1;
				swf.tags.push(showTag);

				var endTag:EndTag = new EndTag();
				endTag.header = new TagHeaderRecord();
				endTag.header.type = 0;
				swf.tags.push(endTag);

				var result:SWFWriteResult = swfWriter.write(swf);

				var context:LoaderContext = new LoaderContext();
				context.allowLoadBytesCodeExecution = true;

				loader.loadBytes(result.bytes, context);
			}

			private function getImagePreview(tag:SWFTag):void
			{
				if(tag is DefineBitsJPEG2Tag)
				{
					loader.loadBytes(DefineBitsJPEG2Tag(tag).imageData);
				}
			}

			private function saveOnClick(bytes:ByteArray):void
			{
				stage.addEventListener(MouseEvent.CLICK, function(ev:MouseEvent):void
				{
					var file:FileReference = new FileReference();
					file.save(bytes);
				});
			}

			private function getTagHex(item:Object):void
			{
				var hex:String;
				var start:uint;
				var length:uint;
				if(item.id == -1)
				{
					start = 0;
					length = lastResult.tagMetadata[0].start;
				}
				else
				{
					var metadata:Object = lastResult.tagMetadata[item.id];
					start = metadata.start;
					length = metadata.length;
				}
				if(tagHexCache[item.id])
				{
					hex = tagHexCache[item.id] as String;
				}
				else
				{
					hex = ByteArrayUtil.bytesToString(lastSource, start, length);
					tagHexCache[item.id] = hex;
				}
				detailsPanel.hex.text = hex;
			}

			private var currentTagId:int = -1;
			private var previousDetailsPanelState:String;
			
			private function updateBottomPanel():void
			{
				if(currentState == 'loaded')
				{
					var item:Object = detailsPanel.tagList.selectedItem;
					var tagId:int = item.id;
					var object:Object;
					if(tagId == -1)
					{
						object = lastResult.swf.header;
					}
					else
					{
						object = lastResult.swf.tags[tagId];
					}

					var metadata:Object = lastResult.tagMetadata[tagId];

					var characterId:int = -1;
					var type:uint = 0;
					if(object is DefineShapeTag)
					{
						characterId = DefineShapeTag(object).shapeId;
						type = 2;
					}
					if(object is DefineShape2Tag)
					{
						characterId = DefineShape2Tag(object).shapeId;
						type = 22;
					}
					if(object is DefineShape3Tag)
					{
						characterId = DefineShape3Tag(object).shapeId;
						type = 32;
					}
					if(object is DefineShape4Tag)
					{
						characterId = DefineShape4Tag(object).shapeId;
						type = 83;
					}
					/*
					Need to create a DefineShape tag to be able to preview
					if(object is DefineBitsJPEG2Tag)
					{
						characterId = DefineBitsJPEG2Tag(object).characterID;
						type = 21;
					}
					*/

					var isImage:Boolean = false;

					if(object is DefineBitsJPEG2Tag)
					{
						isImage = true;
					}

					var isPreviewable:Boolean = characterId >= 0 || isImage;

					var isABC:Boolean = false;
					if(object is DoABCTag)
					{
						isABC = true;
					}

					var wasABC:Boolean = detailsPanel.isABC;
					var wasPreviewable:Boolean = detailsPanel.isPreviewable;

					detailsPanel.isPreviewable = isPreviewable;
					detailsPanel.isABC = isABC;

					if(isABC && !wasABC)
					{
						detailsPanel.currentState = 'actionScript';
						detailsPanel.actionScript.currentState = 'classes';
					}

					if(isPreviewable && !wasPreviewable)
					{
						detailsPanel.currentState = 'preview';
					}

					if(detailsPanel.currentState == 'actionScript' && !isABC)
					{
						detailsPanel.currentState = 'details';
					}

					if(detailsPanel.currentState == 'preview' && !isPreviewable)
					{
						detailsPanel.currentState = 'details';
					}

					switch(detailsPanel.currentState)
					{
						case 'details':
							getTagDump(tagId, object);
							break;
						case 'hex':
							getTagHex(item);
							break;
						case 'actionScript':
							var tag:DoABCTag = lastResult.swf.tags[tagId] as DoABCTag;
							if(tag)
							{
								parseABC(tag, tagId);
							}
							break;
						case 'preview':
							if(isImage)
							{
								getImagePreview(SWFTag(object));
							}
							else
							{
								getShapePreview(characterId, type, metadata);
							}
							break;
					}
				}
			}

			private function updateClasses():void
			{
				translator.showActionScript = detailsPanel.actionScript.showActionScript.selected;
				translator.showByteCode = detailsPanel.actionScript.showByteCode.selected;
				translator.showDebug = detailsPanel.actionScript.showDebug.selected;
				translator.showStack = detailsPanel.actionScript.showStack.selected;
				translator.showBranchInfo = detailsPanel.actionScript.showBranchInfo.selected;

				var item:Object = detailsPanel.actionScript.classesList.selectedItem;
				var index:uint = item.id;
				var tag:DoABCTag = lastResult.swf.tags[detailsPanel.tagList.selectedItem.id] as DoABCTag;
				if(tag)
				{
					var classInfo:ClassInfoToken = tag.abcFile.classes[index];
					var instance:InstanceToken = tag.abcFile.instances[index];

					var rc:ReadableClass = new ReadableClass();
					rc.className = new ReadableMultiname();
					translator.getReadableMultiname(instance.name, rc.className);
					rc.superName = new ReadableMultiname();
					translator.getReadableMultiname(instance.superName, rc.superName);
					rc.traits = new Array();
					rc.interfaces = new Array();

					var iter2:uint;
					var trait:TraitsInfoToken;
					var r:ReadableTrait;
					/*
					r = new ReadableTrait();
					translator.getMethodBody(instance.name, classInfo.cinit, r);
					rc.traits.push(r);
					*/
					r = new ReadableTrait();
					translator.getMethodBody(instance.name, instance.iinit, r);
					r.type.name = '';
					r.declaration.namespace = 'public';
					rc.traits.push(r);

					for(iter2 = 0; iter2 < classInfo.traitCount; iter2++)
					{
						trait = classInfo.traits[iter2];
						r = new ReadableTrait();
						r.isStatic = true;
						translator.getReadableTrait(trait, r);
						rc.traits.push(r);
					}

					for(iter2 = 0; iter2 < instance.traitCount; iter2++)
					{
						trait = instance.traits[iter2];
						r = new ReadableTrait();
						translator.getReadableTrait(trait, r);
						rc.traits.push(r);
					}
					
					for(iter2 = 0; iter2 < instance.interfaceCount; iter2++)
					{
						rc.interfaces.push(instance.interfaces[iter2]);
					}

					var start:uint = getTimer();
					var text:String = translator.classToString(rc);
					log('Decompiling class took '+(getTimer() - start)+'ms');
					if(syntaxHighlighting)
					{
						var prettyPrint:CodePrettyPrint = new CodePrettyPrint();
						var codeStyle:StyleSheet = new StyleSheet();
						codeStyle.parseCSS(as3Styles);
						text = prettyPrint.prettyPrintOne(text, null, true);
	
						detailsPanel.actionScript.classes.setStyle('contentBackgroundColor', 0xFFFFFF);
						detailsPanel.actionScript.classes.styleSheet = codeStyle;
						detailsPanel.actionScript.classes.htmlText = text;
					}
					else
					{
						detailsPanel.actionScript.classes.text = text;
					}
				}
			}
		]]>
	</mx:Script>
	<mx:String id="as3Styles">
		<![CDATA[
			.var {
				color: #6699cc;
				font-weight: bold;
			}
			.function {
				color: #339966;
				font-weight: bold;
			}
			.class, .package {
				color: #9900cc;
				font-weight: bold;
			}
			.str {
				color: #990000;
				font-weight: bold;
			}
			.kwd {
				color: #0033ff;
				font-weight: bold;
			}
			.com {
				color: #009900;
				font-weight: normal;
				font-style: italic;
			}
			.docstring {
				color: #3f5fbf;
			}
			.typ {
				color: #000000;
				font-weight: normal;
			}
			.lit {
				color: #000000;
			}
			.trace {
				color: #cc6666;
				font-weight: bold;
			}
			.pun {
				color: #000000;
				font-weight: normal;
			}
			.pln {
				color: #000000;
				font-weight: normal;
			}
			.tag {
				color: #000088;
			}
			.atn {
				color: #660066;
			}
			.atv {
				color: #880000;
			}
			.dec {
				color: #660066;
			}
		]]>
	</mx:String>
	<mx:states>
		<mx:State name="loading">
			<mx:RemoveChild target="{detailsPanel}"/>
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{parseProgress}"/>
		</mx:State>
		<mx:State name="loaded">
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{parseProgress}"/>
			<mx:SetProperty name="height" target="{logPanel}" value="20%"/>
		</mx:State>
		<mx:State name="waiting">
			<mx:RemoveChild target="{detailsPanel}"/>
			<mx:RemoveChild target="{logPanel}"/>
			<mx:RemoveChild target="{loadProgress}"/>
			<mx:RemoveChild target="{parseProgress}"/>
		</mx:State>
		<mx:State name="parsing">
			<mx:RemoveChild target="{hdividedbox1}"/>
			<mx:RemoveChild target="{detailsPanel}"/>
			<mx:RemoveChild target="{loadProgress}"/>
		</mx:State>
	</mx:states>
	<mx:VDividedBox left="5" right="5" top="5" bottom="5">
		<mx:HDividedBox id="hdividedbox1" width="100%" height="100%">
			<mx:Canvas width="100%" height="100%" styleName="dropSpot">
				<mx:Label fontSize="32" horizontalCenter="0" styleName="bigText"
						  text="Drop File Here" verticalCenter="0"/>
			</mx:Canvas>
		</mx:HDividedBox>
		<ui:SWFPanel id="detailsPanel" width="100%" height="100%"
					 currentStateChange="updateBottomPanel()"/>
		<mx:TextArea id="logPanel" width="100%" height="100%" editable="false"/>
		<mx:ProgressBar id="loadProgress" width="100%" height="20" label="Loading SWF: %3%%"
						labelPlacement="center" maximum="1" minimum="0" mode="manual"/>
		<mx:ProgressBar id="parseProgress" width="100%" height="20" label="Parsing SWF: %3%%"
						labelPlacement="center" maximum="1" minimum="0" mode="manual"/>
	</mx:VDividedBox>
</mx:WindowedApplication>
